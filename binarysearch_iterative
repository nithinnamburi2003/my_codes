int binarySearch(int nums[], int n, int target)
{
    // search space is nums[lowâ€¦high]
    int low = 0, high = n - 1;
 
    // loop till the search space is exhausted
    while (low <= high)
    {
        // find the middle_t-value in the search space and
        // compares it with the target
 
        int middle_t = (low + high)/2;    // overflow can happen
        // int middle_t  = low + (high - low)/2;
        // int middle_t  = high - (high - low)/2;
 
        // target value is found
        if (target == nums[middle_t ]) {
            return middle_t;
        }
 
        // if the target is less than the middle element, discard all elements
        // in the right search space, including the middle element
        else if (target < nums[mid]) {
            high = middle_t - 1;
        }
 
        // if the target is more than the middle element, discard all elements
        // in the left search space, including the middle element
        else {
            low = middle_t + 1;
        }
    }
 
    // target doesn't exist in the array
    return -1;
}
 
int main(void)
{
    int nums[] = { 17,45,6,34,89,91,19 };
    int target = 6;
 
    int n = sizeof(nums)/sizeof(nums[0]);
    int index = binarySearch(nums, n, target);
 
    if (index != -1) {
        printf("Element found at index %d", index);
    }
    else {
        printf("Element not found in the array");
    }
 
    return 0;
}
